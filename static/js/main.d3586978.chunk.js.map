{"version":3,"sources":["Items.js","App.js","serviceWorker.js","index.js"],"names":["Items","props","items","map","item","className","key","type","value","text","id","onChange","e","updateItem","target","onClick","delItem","icon","duration","easing","library","add","faTrash","App","state","currentItem","handleInput","bind","addItem","this","setState","Date","now","preventDefault","newItem","console","log","newItems","filteredItems","filter","onSubmit","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+TAsCA,IAUeA,EA3Cf,SAAeC,GACX,IAAMC,EAAQD,EAAMC,MAAMC,KAAI,SAAAC,GAC1B,OACI,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KAC5B,2BACI,2BACIC,KAAK,OACLC,MAAOJ,EAAKK,KACZC,GAAIN,EAAKE,IACTK,SAAY,SAACC,GACTX,EAAMY,WAAWT,EAAKE,IAAKM,EAAEE,OAAON,UAE5C,8BACI,kBAAC,IAAD,CAAiBH,UAAU,UAAUU,QAAS,WAC1Cd,EAAMe,QAAQZ,EAAKE,MACpBW,KAAK,gBAS5B,OACI,6BACI,kBAAC,IAAD,CAAUC,SAAU,IAAKC,OAAO,eAC/BjB,K,uBCzBbkB,IAAQC,IAAIC,K,IA6FGC,E,kDA1Fb,WAAYtB,GAAQ,IAAD,8BACjB,cAAMA,IACDuB,MAAQ,CACXtB,MAAO,GACPuB,YAAa,CACXhB,KAAM,GACNH,IAAK,KAGT,EAAKoB,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKX,QAAU,EAAKA,QAAQW,KAAb,gBACf,EAAKd,WAAa,EAAKA,WAAWc,KAAhB,gBAZD,E,wDAgBPf,GACViB,KAAKC,SAAS,CACZL,YAAa,CACXhB,KAAMG,EAAEE,OAAON,MACfF,IAAKyB,KAAKC,W,8BAKRpB,GACNA,EAAEqB,iBACF,IAAMC,EAAUL,KAAKL,MAAMC,YAE3B,GADAU,QAAQC,IAAIF,GACQ,KAAjBA,EAAQzB,KAAY,CACrB,IAAM4B,EAAQ,sBAAOR,KAAKL,MAAMtB,OAAlB,CAAyBgC,IACvCL,KAAKC,SAAS,CACZ5B,MAAOmC,EACPZ,YAAa,CACXhB,KAAM,GACNH,IAAK,S,8BAMLA,GACN,IAAMgC,EAAgBT,KAAKL,MAAMtB,MAAMqC,QAAQ,SAAAnC,GAAI,OACjDA,EAAKE,MAAQA,KAEfuB,KAAKC,SAAS,CACZ5B,MAAOoC,M,iCAIAhC,EAAKG,GACd0B,QAAQC,IAAI9B,EAAKG,GACjB,IAAMP,EAAQ2B,KAAKL,MAAMtB,MACzBA,EAAMC,KAAK,SAAAC,GACNA,EAAKE,MAAQA,IACdF,EAAKK,KAAOA,MAGhBoB,KAAKC,SAAS,CACZ5B,MAAOA,M,+BAKT,OACE,yBAAKG,UAAU,MAAMmC,SAAUX,KAAKD,SAElC,gCACE,0BAAMlB,GAAG,aACP,2BACEH,KAAK,OACLkC,YAAY,gBACZjC,MAAOqB,KAAKL,MAAMC,YAAYhB,KAC9BE,SAAUkB,KAAKH,cAEjB,4BAAQnB,KAAK,UAAb,SAIJ,kBAAC,EAAD,CACEL,MAAU2B,KAAKL,MAAMtB,MACrBc,QAAYa,KAAKb,QACjBH,WAAegB,KAAKhB,kB,GAnFZ6B,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.d3586978.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Items.css';\r\nimport FlipMove from 'react-flip-move';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nfunction Items(props){\r\n    const items = props.items.map(item => {\r\n        return (\r\n            <div className=\"list\" key={item.key}>\r\n                <p>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={item.text}\r\n                        id={item.key}\r\n                        onChange= { (e) => {\r\n                            props.updateItem(item.key, e.target.value)\r\n                        }} />\r\n                    <span>\r\n                        <FontAwesomeIcon className=\"faicons\" onClick={() => {\r\n                            props.delItem(item.key)\r\n                        }} icon=\"trash\" />\r\n                    </span>\r\n\r\n                </p>\r\n\r\n            </div>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <FlipMove duration={200} easing=\"ease-in-out\">\r\n            {items}\r\n            </FlipMove>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst btnStyle = {\r\n    background : '#ff0000',\r\n    color: '#fff',\r\n    border: 'none',\r\n    padding: '10px 10px',\r\n    borderRadius: '50%',\r\n    cursor: 'pointer',\r\n    float: 'right'\r\n}\r\n\r\nexport default Items\r\n","import React, { Component } from 'react';\n\nimport Items from './Items.js';\nimport './App.css';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faTrash)\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      currentItem: {\n        text: '',\n        key: ''\n      }\n    }\n    this.handleInput = this.handleInput.bind(this);\n    this.addItem = this.addItem.bind(this);\n    this.delItem = this.delItem.bind(this);\n    this.updateItem = this.updateItem.bind(this);\n  }\n\n\n  handleInput(e) {\n    this.setState({\n      currentItem: {\n        text: e.target.value,\n        key: Date.now()\n      }\n    })\n  }\n\n  addItem(e){\n    e.preventDefault();\n    const newItem = this.state.currentItem;\n    console.log(newItem)\n    if(newItem.text !== ''){\n      const newItems = [...this.state.items, newItem];\n      this.setState({\n        items: newItems,\n        currentItem: {\n          text: '',\n          key: ''\n        }\n      })\n    }\n  }\n\n  delItem(key){\n    const filteredItems = this.state.items.filter( item => (\n      item.key !== key\n    ))\n    this.setState({\n      items: filteredItems\n    })\n  }\n\n  updateItem(key, text){\n    console.log(key, text);\n    const items = this.state.items;\n    items.map( item => {\n      if(item.key === key){\n        item.text = text;\n      }\n    })\n    this.setState({\n      items: items\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\" onSubmit={this.addItem} >\n\n        <header>\n          <form id=\"todo-form\">\n            <input\n              type=\"text\"\n              placeholder=\"Enter Todo...\"\n              value={this.state.currentItem.text}\n              onChange={this.handleInput}\n            />\n            <button type=\"submit\" >Add</button>\n          </form>\n        </header>\n\n        <Items\n          items = { this.state.items }\n          delItem = { this.delItem }\n          updateItem = { this.updateItem } >\n        </Items >\n\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}